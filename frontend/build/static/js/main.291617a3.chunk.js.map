{"version":3,"sources":["components/Nav.js","components/Home.js","components/Lyrics.js","components/Game.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","to","Home","className","type","Lyrics","song","song_lyrics","Game","state","data","band","score","click","showWinner","getData","a","axios","get","res","randomIndex","Math","floor","random","length","setState","console","log","handleChange","target","name","value","handleSubmit","e","preventDefault","toLowerCase","band_name","song_name","handleClick","this","onSubmit","placeholder","onChange","onClick","React","Component","Footer","href","rel","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.291617a3.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { AiFillHome } from 'react-icons/ai'\n\nconst Nav = () => (\n  <nav>\n    <Link to =\"/\"><AiFillHome/> Home</Link>\n    \n  </nav>\n)\n\nexport default Nav","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { IoMdHeart } from 'react-icons/io'\n\nconst Home = () => (\n    <section className=\"home\">\n    <h1>B<span><IoMdHeart/></span>y Bands 4eva!</h1>\n    <h2>a lyrics game</h2>\n      <Link to=\"/game\">\n        <button type=\"button\">Lets Play!</button>\n      </Link>\n    </section>\n)\n\nexport default Home","import React from 'react'\n\n\nconst Lyrics = ({ song }) => (\n\n    <h2>{song.song_lyrics}</h2>\n\n)\n\nexport default Lyrics","import React from 'react'\nimport axios from 'axios'\n\n\nimport Lyrics from './Lyrics'\n\nexport default class Game extends React.Component {\n  state = {\n    data: {\n      band: '',\n      song: ''\n    },\n    song: [],\n    score: 0,\n    click: 0,\n    showWinner: false\n  }\n\n  getData = async () => {\n    try {\n      const res = await axios.get('/api/game/')\n      const randomIndex = (Math.floor(Math.random() * res.data.length))\n      // console.log(res.data[randomIndex])\n      this.setState({ song: res.data[randomIndex]})\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  async componentDidMount() {\n    this.getData()\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    const data = { ...this.state.data, [name]: value }\n    console.log(data)\n    this.setState({ data })\n  }\n\n  handleSubmit = e => {\n    e.preventDefault()\n    if (this.state.data.band.toLowerCase() === this.state.song.band_name.toLowerCase() && this.state.data.song.toLowerCase() === this.state.song.song_name.toLowerCase()) {\n      this.setState({ score: this.state.score + 15 })\n    } else if (this.state.data.song.toLowerCase() === this.state.song.song_name.toLowerCase()) {\n      this.setState({ score: this.state.score + 10 })\n    } else if (this.state.data.band.toLowerCase() === this.state.song.band_name.toLowerCase()) {\n      this.setState({ score: this.state.score + 5 })\n    }\n    this.setState({ data: { band: '', song: '' }, click: this.state.click + 1 })\n    if (this.state.click === 9) {\n      this.setState({ showWinner: true })\n    }\n    this.getData()\n  }\n\n  handleClick = () => {\n    this.getData()\n    this.setState({ score: 0, click: 0, showWinner: false })\n  }\n\n  render() {\n    if (!this.state.song) return null\n    return (\n      <main className=\"main-game\">\n       {!this.state.showWinner ?  \n      <section className=\"game\">\n          <div className=\"lyrics\">\n            <Lyrics song={this.state.song}/>\n          </div>\n\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"form-div\">\n              <label>Band Name:</label>\n              <input\n                placeholder=\"your answer here\"\n                name=\"band\"\n                value={this.state.data.band}\n                onChange={this.handleChange}/>\n            </div>\n\n            <div className=\"form-div\">\n              <label>Song Title:</label>\n              <input\n                placeholder=\"your answer here\"\n                name=\"song\"\n                value={this.state.data.song}\n                onChange={this.handleChange}/>\n            </div>\n\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          </form>\n      </section>\n      : null }\n\n      {!this.state.showWinner ? \n      <section className=\"score\">\n        <p>Score:</p>\n        <p>{this.state.score}</p>\n      </section>\n      : null }\n        \n        {this.state.showWinner ? \n          <div className=\"winner\">\n            <p>Well played!  You scored {this.state.score} points!</p>\n            <div>\n              <button \n              type=\"button\"\n              onClick={this.handleClick}>Play again!</button>\n            </div>\n          </div>\n          : null }\n      </main>\n    )\n  }\n}","import React from 'react'\nimport { AiOutlineTwitter, AiFillLinkedin, AiFillFolder } from 'react-icons/ai'\n\nconst Footer = () => (\n  <footer>\n    <nav>\n      <a href=\"https://twitter.com/flarer222\" \n      target=\"_blank\" \n      rel=\"noopener noreferrer\">\n      <AiOutlineTwitter/> \n      Twitter</a>\n      <a href=\"https://www.linkedin.com/in/clare-robertson-ab1ba0142/\"\n      target=\"_blank\" \n      rel=\"noopener noreferrer\">\n      <AiFillLinkedin/> \n      LinkedIn</a>\n      <a href=\"https://flare222.github.io/portfolio/\"\n      target=\"_blank\" \n      rel=\"noopener noreferrer\"><AiFillFolder/> Portfolio</a>\n    </nav>\n  </footer>\n)\n\nexport default Footer","import React from 'react'\n// import ReactDOM from 'react-dom'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport './styles/main.scss'\n\nimport Nav from './components/Nav'\nimport Home from './components/Home'\nimport Game from './components/Game'\nimport Footer from './components/Footer'\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <main className=\"page-container\">\n        <div className=\"content-wrap\">\n        <BrowserRouter>\n          <Nav />\n          <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/game\" component={Game}/>\n          </Switch>\n          <Footer />\n        </BrowserRouter>\n        </div>\n      </main>\n    )\n  }\n}\n    \n\n\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// )","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}